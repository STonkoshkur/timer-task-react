{"version":3,"sources":["store/initial-state.js","store/actions/types/index.js","store/reducers/index.js","store/reducers/task.js","store/reducers/timer.js","store/actions/task.js","store/actions/timer.js","api/BaseProxy.js","store/sagas/index.js","helpers/constants.js","styles/index.js","components/AlertDialog.js","components/Timer.js","components/TimerTask.js","components/TasksLogs.js","helpers/index.js","components/TasksChart.js","pages/Home.js","pages/TaskDetails.js","pages/NotFound.js","App.js","store/index.js","serviceWorker.js","index.js"],"names":["task","id","name","startDateTime","endDateTime","isLoading","isFailed","list","timer","isActive","initial_state","taskTypes","HANDLE_TASK_CREATE","STORE_TASK","HANDLE_TASK_REMOVE","REMOVE_TASK","HANDLE_TASKS_LIST_CREATE","STORE_TASKS_LIST","HANDLE_TASKS_LIST_REMOVE","REMOVE_TASKS_LIST","FIND_TASK_DETAILS","SET_TASK_DETAILS","CLEAR_TASK_DETAILS","timerTypes","HANDLE_TIMER_START","STORE_TIMER","HANDLE_TIMER_NAME_UPDATE","UPDATE_NAME","HANDLE_TIMER_STOP","REMOVE_TIMER","combineReducers","state","arguments","length","undefined","INITIAL_STATE","action","type","Object","objectSpread","concat","toConsumableArray","payload","filter","addTask","storeTask","removeTask","taskId","removeTaskFromList","createTasksList","tasksList","storeTasksList","clearTasksList","removeTasksList","findTask","setTaskDetails","clearTaskDetails","startTimer","_ref","start","storeTimer","updateName","taskName","setTimerName","stopTimer","removeTimer","BaseProxy","itemName","itemData","localStorage","setItem","JSON","stringify","parse","getItem","removeItem","fetchTaskDetails","handleTaskCreate","handleTaskRemove","handleTasksListCreate","handleTasksListRemove","handleTimerStart","handleTimerNameUpdate","handleTimerStop","rootSaga","apiProxy","taskDetails","foundTask","regenerator_default","a","wrap","_context","prev","next","select","sent","put","delay","find","Number","end","stop","_marked","_ref2","_context2","store","_marked2","_ref3","_ref4","_context3","_marked3","_ref5","_ref6","_context4","_marked4","_context5","destroy","_marked5","_ref7","_context6","_marked6","_ref8","_context7","_marked7","_context8","_marked8","_context9","all","takeEvery","_marked9","ROUTERS","tasksLogs","tasksChart","notFound","HOMEPAGE_TABS","logs","chart","RANDOM_TASKS","minCount","maxCount","minDuration","maxDuration","minBreakDuration","maxBreakDuration","startHour","src_styles","textInput","color","textAlign","button","background","timerFab","width","height","margin","fontSize","tabsWrapper","boxShadow","tabsIndicator","tab","alertTitle","homepageContainer","padding","timerContainer","marginBottom","chartFooterContainer","justifyContent","cardPageContainer","tableRow","justifyCenter","textAlignLeft","textAlignCenter","colors","red","violet","teal","pink","Transition","props","react_default","createElement","Slide_default","assign","direction","withStyles","styles","title","message","isShown","_props$closeButtonTex","closeButtonText","classes","_props$maxWidth","maxWidth","handleClose","onAlertClose","Dialog_default","open","TransitionComponent","onClose","aria-labelledby","aria-describedby","keepMounted","fullWidth","DialogTitle_default","disableTypography","className","DialogContent_default","DialogContentText_default","DialogActions_default","Button_default","onClick","Timer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isTimerActive","timeDuration","Interval","fromDateTimes","DateTime","local","toDuration","Duration","fromMillis","intervalId","updateTimerValue","bind","assertThisInitialized","updateTimerStatus","prevProps","clearInterval","value","setState","defineProperty","timerStatus","_this2","interval","setInterval","handleStateChange","formattedTimeDuration","isValid","toFormat","Fab_default","Component","TimerTask","handleTaskNameChange","handleEmptyTaskError","taskList","Math","max","apply","map","event","updateTaskName","target","_this$props","startTaskTimer","toISO","_this$props2","_this$props2$timer","stopTaskTimer","addTaskToLog","String","trim","getTaskNextId","onEmptyTaskError","_this$props3","_this$props3$timer","Input_default","label","placeholder","onChange","components_Timer","fromISO","variant","size","connect","dispatch","removeTaskFromLog","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","key","colSpan","component","scope","RouterLink","to","getRandomValue","minVal","maxVal","floor","random","getChartData","groupedTasks","_loop","hour","startOfHour","fromObject","minute","second","endOfHour","currentHourInterval","foundTasks","intersection","tasksTimeSum","reduce","sum","tasksMinutes","taskStartDateTime","taskEndDateTime","toObject","minutes","round","push","tasksTime","createTasksLog","clearTasksLog","es6","data","top","strokeDasharray","dataKey","barSize","fill","Grid_default","container","justify","item","xs","randTasksCount","generatedTasks","taskDateTime","i","taskDuration","breakDuration","startTaskTime","plus","endTaskTime","Home","location","selectedTab","pathname","isAlertShown","handleTabChange","handleAlertOpen","handleAlertClose","_this$state","lg","components_TimerTask","AppBar_default","position","Tabs_default","TabIndicatorProps","Tab_default","components_TasksChart","components_TasksLogs","components_AlertDialog","withRouter","TaskDetails","match","findTaskDetails","params","clearTask","react_router","md","Card_default","CardContent_default","CircularProgress_default","Typography_default","gutterBottom","CardActions_default","sagaMiddleware","createSagaMiddleware","createStore","reducers","cachedTimer","cachedTasksLog","initialState","getPreloadedState","composeWithDevTools","applyMiddleware","run","initStore","App","es","react_router_dom","exact","path","NotFound","Boolean","window","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec0e9f72.chunk.js","sourcesContent":["export const task = {\n  task: {\n    id: 0,\n    name: '',\n    startDateTime: null,\n    endDateTime: null,\n    isLoading: false,\n    isFailed: false\n  },\n  list: []\n};\n\nexport const timer = {\n  timer: {\n    isActive: false,\n    name: '',\n    startDateTime: null\n  }\n};\n\nexport default {\n  task,\n  timer\n};\n","export const taskTypes = {\n    HANDLE_TASK_CREATE: 'HANDLE_TASK_CREATE',\n    STORE_TASK: 'STORE_TASK',\n    HANDLE_TASK_REMOVE: 'HANDLE_TASK_REMOVE',\n    REMOVE_TASK: 'REMOVE_TASK',\n    HANDLE_TASKS_LIST_CREATE: 'HANDLE_TASKS_LIST_CREATE',\n    STORE_TASKS_LIST: 'STORE_TASKS_LIST',\n    HANDLE_TASKS_LIST_REMOVE: 'HANDLE_TASKS_LIST_REMOVE',\n    REMOVE_TASKS_LIST: 'REMOVE_TASKS_LIST',\n    FIND_TASK_DETAILS: 'FIND_TASK_DETAILS',\n    SET_TASK_DETAILS: 'SET_TASK_DETAILS',\n    CLEAR_TASK_DETAILS: 'CLEAR_TASK_DETAILS',\n};\n\nexport const timerTypes = {\n    HANDLE_TIMER_START: 'HANDLE_TIMER_START',\n    STORE_TIMER: 'STORE_TIMER',\n    HANDLE_TIMER_NAME_UPDATE: 'HANDLE_TIMER_NAME_UPDATE',\n    UPDATE_NAME: 'UPDATE_NAME',\n    HANDLE_TIMER_STOP: 'HANDLE_TIMER_STOP',\n    REMOVE_TIMER: 'REMOVE_TIMER',\n};\n\nexport default {\n    taskTypes,\n    timerTypes,\n};","import { combineReducers } from 'redux';\n\nimport task from './task';\nimport timer from './timer';\n\nexport default combineReducers({ task, timer });\n","import { taskTypes } from '../actions/types';\nimport { task as INITIAL_STATE } from '../initial-state';\n\nexport default function reducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n        // case taskTypes.CREATE_TASK:\n        case taskTypes.STORE_TASK:\n            return {\n                ...state,\n                list: [\n                    ...state.list,\n                    action.payload,\n                ],\n            };\n        case taskTypes.REMOVE_TASK:\n            return {\n                ...state,\n                list: state.list.filter(task => task.id !== action.payload),\n            };\n        case taskTypes.STORE_TASKS_LIST:\n            return {\n                ...state,\n                list: action.payload,\n            };\n        case taskTypes.REMOVE_TASKS_LIST:\n            return {\n                ...state,\n                list: INITIAL_STATE.list,\n            };\n        case taskTypes.SET_TASK_DETAILS:\n            return {\n                ...state,\n                task: action.payload,\n            };\n        case taskTypes.CLEAR_TASK_DETAILS:\n            return {\n                ...state,\n                task: INITIAL_STATE.task,\n            };\n        default:\n            return state;\n    }\n}","import { timerTypes } from '../actions/types';\nimport { timer as INITIAL_STATE } from '../initial-state';\n\nexport default function reducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case timerTypes.STORE_TIMER:\n            return {\n                ...state,\n                timer: {\n                    ...action.payload,\n                    isActive: true,\n                },\n            };\n        case timerTypes.UPDATE_NAME:\n            return {\n                ...state,\n                timer: {\n                    ...state.timer,\n                    name: action.payload,\n                },\n            };\n        case timerTypes.REMOVE_TIMER:\n            return {\n                ...state,\n                timer: INITIAL_STATE.timer,\n            };\n        default:\n            return state;\n    }\n}","import { taskTypes } from './types';\n\nexport function addTask(task) {\n    return { type: taskTypes.HANDLE_TASK_CREATE, payload: task };\n}\n\nexport function storeTask(task) {\n    return { type: taskTypes.STORE_TASK, payload: task };\n}\n\nexport function removeTask(taskId) {\n    return { type: taskTypes.HANDLE_TASK_REMOVE, payload: taskId };\n}\n\nexport function removeTaskFromList(taskId) {\n    return { type: taskTypes.REMOVE_TASK, payload: taskId };\n}\n\nexport function createTasksList(tasksList) {\n    return { type: taskTypes.HANDLE_TASKS_LIST_CREATE, payload: tasksList };\n}\n\nexport function storeTasksList(tasksList) {\n    return { type: taskTypes.STORE_TASKS_LIST, payload: tasksList };\n}\n\nexport function clearTasksList() {\n    return { type: taskTypes.HANDLE_TASKS_LIST_REMOVE };\n}\n\nexport function removeTasksList() {\n    return { type: taskTypes.REMOVE_TASKS_LIST };\n}\n\nexport function findTask(taskId) {\n    return { type: taskTypes.FIND_TASK_DETAILS, payload: taskId };\n}\n\nexport function setTaskDetails(task) {\n    return { type: taskTypes.SET_TASK_DETAILS, payload: task };\n}\n\nexport function clearTaskDetails() {\n    return { type: taskTypes.CLEAR_TASK_DETAILS };\n}\n\nexport default {\n    addTask,\n    storeTask,\n    removeTask,\n    removeTaskFromList,\n    createTasksList,\n    storeTasksList,\n    clearTasksList,\n    removeTasksList,\n    findTask,\n    setTaskDetails,\n    clearTaskDetails,\n};\n","import { timerTypes } from './types';\n\nexport function startTimer({ name, start }) {\n    return {\n        type: timerTypes.HANDLE_TIMER_START,\n        payload: {\n            isActive: true,\n            name,\n            startDateTime: start,\n        },\n    };\n}\n\nexport function storeTimer(timer) {\n    return { type: timerTypes.STORE_TIMER, payload: timer };\n}\n\nexport function updateName(taskName) {\n    return { type: timerTypes.HANDLE_TIMER_NAME_UPDATE, payload: taskName };\n}\n\nexport function setTimerName(taskName) {\n    return { type: timerTypes.UPDATE_NAME, payload: taskName };\n}\n\nexport function stopTimer() {\n    return { type: timerTypes.HANDLE_TIMER_STOP };\n}\n\nexport function removeTimer() {\n    return { type: timerTypes.REMOVE_TIMER };\n}\n\nexport default {\n    startTimer,\n    storeTimer,\n    updateName,\n    setTimerName,\n    stopTimer,\n    removeTimer,\n};\n","class BaseProxy {\n  store(itemName, itemData) {\n    return localStorage.setItem(itemName, JSON.stringify(itemData));\n  }\n\n  find(itemName) {\n    return JSON.parse(localStorage.getItem(itemName));\n  }\n\n  destroy(itemName) {\n    return localStorage.removeItem(itemName);\n  }\n}\n\nexport default BaseProxy;\n","import { all, put, takeEvery, select, delay } from 'redux-saga/effects'\n\nimport { task as INITIAL_STATE } from '../initial-state';\nimport { taskTypes, timerTypes } from '../actions/types';\nimport {\n    storeTask,\n    removeTaskFromList,\n    storeTasksList,\n    removeTasksList,\n    setTaskDetails,\n} from '../actions/task';\n\nimport {\n    storeTimer,\n    setTimerName,\n    removeTimer,\n} from '../actions/timer';\n\nimport BaseProxy from '../../api/BaseProxy';\n\n/**\n * Init api proxy instance\n * @type {BaseProxy}\n */\nconst apiProxy = new BaseProxy();\n\n/**\n * Fetch task details data with delay\n *\n * @param action\n * @returns {IterableIterator<*>}\n */\nexport function* fetchTaskDetails(action) {\n    const { task: { list : tasksList } } = yield select();\n    let taskDetails = INITIAL_STATE.task;\n\n    yield put(setTaskDetails({\n        ...taskDetails,\n        isLoading: true,\n    }));\n\n    yield delay(1000);\n\n    const foundTask = tasksList.find(task => task.id === Number(action.payload));\n\n    if (foundTask) {\n        taskDetails = {\n            ...INITIAL_STATE.task,\n            id: foundTask.id,\n            name: foundTask.name,\n            startDateTime: foundTask.start,\n            endDateTime: foundTask.end,\n        };\n    } else {\n        taskDetails = {\n            ...INITIAL_STATE.task,\n            isFailed: true,\n        };\n    }\n\n    yield put(setTaskDetails(taskDetails));\n}\n\n/**\n * Create new task and save to localStorage\n * @param action\n * @returns {IterableIterator<*>}\n */\nexport function* handleTaskCreate(action) {\n    yield put(storeTask(action.payload));\n\n    const { task: { list : tasksList } } = yield select();\n    apiProxy.store('tasksLog', tasksList);\n}\n\n/**\n * Remove task from logs and update localStorage value\n * @param action\n * @returns {IterableIterator<*>}\n */\nexport function* handleTaskRemove({ payload }) {\n    yield put(removeTaskFromList(payload));\n\n    const { task: { list : tasksList } } = yield select();\n    apiProxy.store('tasksLog', tasksList);\n}\n\n/**\n * Create tasks logs and save it to localStorage\n * @param action\n * @returns {IterableIterator<*>}\n */\nexport function* handleTasksListCreate({ payload }) {\n    yield put(storeTasksList(payload));\n\n    const { task: { list : tasksList } } = yield select();\n    apiProxy.store('tasksLog', tasksList);\n}\n\n/**\n * Remove tasks logs from state and localStorage\n * @returns {IterableIterator<*>}\n */\nexport function* handleTasksListRemove() {\n    yield put(removeTasksList());\n    apiProxy.destroy('tasksLog');\n}\n\n/**\n * Create new timer instance and save it to localStorage\n * @returns {IterableIterator<*>}\n */\nexport function* handleTimerStart(action) {\n    yield put(storeTimer(action.payload));\n\n    const { timer: { timer } } = yield select();\n    apiProxy.store('timer', timer);\n}\n\n/**\n * Update timer task name and update localStorage value\n * @returns {IterableIterator<*>}\n */\nexport function* handleTimerNameUpdate(action) {\n    yield put(setTimerName(action.payload));\n\n    const { timer: { timer } } = yield select();\n    apiProxy.store('timer', timer);\n}\n\n/**\n * Remove timer data from state and localStorage\n * @returns {IterableIterator<*>}\n */\nexport function* handleTimerStop() {\n    yield put(removeTimer());\n    apiProxy.destroy('timer');\n}\n\nexport default function* rootSaga() {\n    yield all([\n        // Tasks actions:\n        takeEvery(taskTypes.FIND_TASK_DETAILS, fetchTaskDetails),\n        takeEvery(taskTypes.HANDLE_TASK_CREATE, handleTaskCreate),\n        takeEvery(taskTypes.HANDLE_TASK_REMOVE, handleTaskRemove),\n        takeEvery(taskTypes.HANDLE_TASKS_LIST_CREATE, handleTasksListCreate),\n        takeEvery(taskTypes.HANDLE_TASKS_LIST_REMOVE, handleTasksListRemove),\n\n        // Timer actions:\n        takeEvery(timerTypes.HANDLE_TIMER_START, handleTimerStart),\n        takeEvery(timerTypes.HANDLE_TIMER_NAME_UPDATE, handleTimerNameUpdate),\n        takeEvery(timerTypes.HANDLE_TIMER_STOP, handleTimerStop),\n    ]);\n}\n","export const ROUTERS = {\n  taskDetails: '/tasks/details',\n  tasksLogs: '/tasks/logs',\n  tasksChart: '/tasks/chart',\n\n  notFound: '/not/found'\n};\n\nexport const HOMEPAGE_TABS = {\n  logs: 'LOGS',\n  chart: 'CHART'\n};\n\nexport const RANDOM_TASKS = {\n  minCount: 10,\n  maxCount: 15,\n\n  minDuration: 10,\n  maxDuration: 90,\n\n  minBreakDuration: 5,\n  maxBreakDuration: 30,\n\n  startHour: 8\n};\n","const redColor = '#bf2b5c';\nconst pinkColor = '#ff4081';\nconst violetColor = '#3248c7';\nconst tealColor = '#01bcd5';\nconst whiteColor = '#fff';\n\nconst lightBlue = '#eaf6ff';\n\nexport default {\n  textInput: {\n    color: violetColor,\n    textAlign: 'center'\n  },\n  button: {\n    color: violetColor,\n    background: whiteColor\n  },\n  timerFab: {\n    width: '9rem',\n    height: '9rem',\n    margin: '1.5rem',\n    background: whiteColor,\n    color: violetColor,\n    fontSize: '1.5rem'\n  },\n  tabsWrapper: {\n    background: tealColor,\n    boxShadow: 'none'\n  },\n  tabsIndicator: {\n    background: pinkColor\n  },\n  tab: {\n    background: tealColor\n  },\n  alertTitle: {\n    color: redColor,\n    margin: 0\n  },\n  homepageContainer: {\n    padding: '2rem'\n  },\n  timerContainer: {\n    marginBottom: '1.5rem'\n  },\n  chartFooterContainer: {\n    justifyContent: 'justify-end',\n    textAlign: 'right',\n    padding: '1rem 0'\n  },\n  cardPageContainer: {\n    margin: '3rem 0'\n  },\n  tableRow: {\n    background: lightBlue\n  },\n  justifyCenter: {\n    justifyContent: 'center'\n  },\n  textAlignLeft: {\n    textAlign: 'left'\n  },\n  textAlignCenter: {\n    textAlign: 'center'\n  },\n  colors: {\n    red: redColor,\n    violet: violetColor,\n    teal: tealColor,\n    pink: pinkColor\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Components\n */\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\n/**\n * Styles\n */\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from '../styles';\n\nfunction Transition(props) {\n  return <Slide direction=\"up\" {...props} />;\n}\n\nfunction AlertDialog(props) {\n  const {\n    title,\n    message,\n    isShown,\n    closeButtonText = 'Close',\n    classes,\n    maxWidth = 'md'\n  } = props;\n\n  function handleClose() {\n    props.onAlertClose();\n  }\n\n  return (\n    <Dialog\n      open={isShown}\n      TransitionComponent={Transition}\n      maxWidth={maxWidth}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n      keepMounted\n      fullWidth\n    >\n      <DialogTitle id=\"alert-dialog-slide-title\" disableTypography>\n        <h2 className={classes.alertTitle}>{title}</h2>\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-slide-description\">\n          {message}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          {closeButtonText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nAlertDialog.propTypes = {\n  onAlertClose: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(AlertDialog);\n","import React, { Component } from 'react';\nimport { DateTime, Interval, Duration } from 'luxon';\nimport PropTypes from 'prop-types';\n\n/**\n * Components\n */\nimport Fab from '@material-ui/core/Fab';\n\n/**\n * Styles\n */\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from '../styles';\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n\n    const { isTimerActive, startDateTime } = props;\n    const timeDuration =\n      !!isTimerActive && startDateTime\n        ? Interval.fromDateTimes(startDateTime, DateTime.local()).toDuration()\n        : Duration.fromMillis(0);\n\n    this.state = {\n      intervalId: null,\n      timeDuration\n    };\n\n    this.updateTimerValue = this.updateTimerValue.bind(this);\n  }\n\n  componentDidMount() {\n    const { isTimerActive } = this.props;\n\n    this.updateTimerStatus(isTimerActive);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { isTimerActive } = this.props;\n\n    if (isTimerActive !== prevProps.isTimerActive) {\n      this.updateTimerStatus(isTimerActive);\n    }\n  }\n\n  componentWillUnmount() {\n    const { intervalId } = this.state;\n\n    clearInterval(intervalId);\n  }\n\n  handleStateChange(name, value) {\n    this.setState({ [name]: value });\n  }\n\n  updateTimerStatus(timerStatus) {\n    const { intervalId } = this.state;\n\n    if (timerStatus) {\n      const interval = setInterval(() => {\n        this.updateTimerValue();\n      }, 1000);\n\n      this.handleStateChange('intervalId', interval);\n    } else {\n      clearInterval(intervalId);\n      this.handleStateChange('timeDuration', Duration.fromMillis(0));\n    }\n  }\n\n  updateTimerValue() {\n    const { startDateTime } = this.props;\n\n    this.handleStateChange(\n      'timeDuration',\n      Interval.fromDateTimes(startDateTime, DateTime.local()).toDuration()\n    );\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { timeDuration } = this.state;\n    const formattedTimeDuration =\n      timeDuration && timeDuration.isValid\n        ? timeDuration.toFormat('hh:mm:ss')\n        : '-';\n\n    return <Fab className={classes.timerFab}>{formattedTimeDuration}</Fab>;\n  }\n}\n\nTimer.propTypes = {\n  isTimerActive: PropTypes.bool.isRequired,\n  startDateTime: PropTypes.instanceOf(DateTime).isRequired\n};\n\nexport default withStyles(styles)(Timer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { DateTime } from 'luxon';\nimport PropTypes from 'prop-types';\n\n/**\n * Components\n */\nimport TextField from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\n\n/**\n * Styles\n */\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from '../styles';\n\nimport { addTask } from '../store/actions/task';\nimport { startTimer, stopTimer, updateName } from '../store/actions/timer';\nimport Timer from './Timer';\n\nclass TimerTask extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTimerStart = this.handleTimerStart.bind(this);\n    this.handleTimerStop = this.handleTimerStop.bind(this);\n    this.handleTaskNameChange = this.handleTaskNameChange.bind(this);\n    this.handleEmptyTaskError = this.handleEmptyTaskError.bind(this);\n  }\n\n  getTaskNextId() {\n    const { taskList } = this.props;\n\n    return taskList && taskList.length\n        ? Math.max(...taskList.map(task => task.id)) + 1\n        : 1;\n  }\n\n  handleTaskNameChange(event) {\n    const { updateTaskName } = this.props;\n\n    updateTaskName(event.target.value || '');\n  }\n\n  handleTimerStart() {\n    const { timer, startTaskTimer } = this.props;\n\n    startTaskTimer({\n      name: timer.name || '',\n      start: DateTime.local().toISO()\n    });\n  }\n\n  handleTimerStop() {\n    const { timer = {}, stopTaskTimer, addTaskToLog } = this.props;\n\n    if (!timer.name || String(timer.name).trim().length === 0) {\n      this.handleEmptyTaskError();\n      return false;\n    }\n\n    stopTaskTimer();\n\n    addTaskToLog({\n      id: this.getTaskNextId(),\n      name: timer.name,\n      start: timer.startDateTime,\n      end: DateTime.local().toISO()\n    });\n\n    return true;\n  }\n\n  handleEmptyTaskError() {\n    const { onEmptyTaskError } = this.props;\n\n    onEmptyTaskError();\n  }\n\n  render() {\n    const { timer = {}, classes } = this.props;\n\n    return (\n      <div className={classes.timerContainer}>\n        <div>\n          <TextField\n            id=\"task-name\"\n            label=\"Name of your task\"\n            placeholder=\"Name of your task\"\n            value={timer.name}\n            onChange={this.handleTaskNameChange}\n            className={classes.textInput}\n          />\n        </div>\n        <div>\n          <Timer\n            isTimerActive={!!timer.isActive}\n            startDateTime={DateTime.fromISO(timer.startDateTime)}\n          />\n        </div>\n        <div>\n          <Button\n            variant=\"contained\"\n            onClick={\n              timer.isActive ? this.handleTimerStop : this.handleTimerStart\n            }\n            className={classes.button}\n            size=\"small\"\n          >\n            {timer.isActive ? 'STOP' : 'START'}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nTimerTask.propTypes = {\n  onEmptyTaskError: PropTypes.func.isRequired,\n  timer: PropTypes.shape({\n    isActive: PropTypes.bool.isRequired,\n    name: PropTypes.string\n  }).isRequired\n  // taskList: PropTypes.array,\n};\n\nexport default connect(\n  ({ task, timer }) => ({\n    timer: timer.timer,\n    taskList: task.list\n  }),\n  dispatch => ({\n    startTaskTimer: timer => dispatch(startTimer(timer)),\n    updateTaskName: taskName => dispatch(updateName(taskName)),\n    stopTaskTimer: () => dispatch(stopTimer()),\n    addTaskToLog: task => dispatch(addTask(task))\n  })\n)(withStyles(styles)(TimerTask));\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { Link as RouterLink } from 'react-router-dom';\nimport { DateTime, Interval } from 'luxon';\n\n/**\n * Components\n */\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\n\n/**\n * Styles\n */\nimport { withStyles } from '@material-ui/core';\nimport styles from '../styles';\n\nimport { removeTask } from '../store/actions/task';\nimport { ROUTERS } from '../helpers/constants';\n\nfunction TasksLogs(props) {\n  const { taskList, removeTaskFromLog, classes } = props;\n  const handleTaskRemove = taskId => () => removeTaskFromLog(taskId);\n\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>№</TableCell>\n          <TableCell>Task</TableCell>\n          <TableCell>Time start</TableCell>\n          <TableCell>Time end</TableCell>\n          <TableCell>Time spend</TableCell>\n          <TableCell>Info</TableCell>\n          <TableCell>Delete</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {taskList.length === 0 && (\n          <TableRow\n              key=\"noData\"\n              className={classes.tableRow}\n          >\n            <TableCell colSpan={7} className={classes.textAlignCenter}>\n              No tasks to show\n            </TableCell>\n          </TableRow>\n        )}\n        {taskList.length > 0 &&\n          taskList.map(task => (\n            <TableRow\n                key={task.id}\n                className={classes.tableRow}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {task.id}\n              </TableCell>\n              <TableCell>{task.name}</TableCell>\n              <TableCell>\n                {DateTime.fromISO(task.start).toFormat('HH:mm:ss')}\n              </TableCell>\n              <TableCell>\n                {DateTime.fromISO(task.end).toFormat('HH:mm:ss')}\n              </TableCell>\n              <TableCell>\n                {Interval.fromDateTimes(\n                  DateTime.fromISO(task.start),\n                  DateTime.fromISO(task.end)\n                )\n                  .toDuration()\n                  .toFormat('hh:mm:ss')}\n              </TableCell>\n              <TableCell>\n                <Button\n                  variant=\"contained\"\n                  className={classes.button}\n                  size=\"small\"\n                  component={RouterLink}\n                  to={`${ROUTERS.taskDetails}/${task.id}`}\n                >\n                  Info\n                </Button>\n              </TableCell>\n              <TableCell>\n                <Button\n                  variant=\"contained\"\n                  className={classes.button}\n                  size=\"small\"\n                  onClick={handleTaskRemove(task.id)}\n                >\n                  Delete\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default connect(\n  ({ task }) => ({\n    taskList: task.list\n  }),\n  dispatch => ({\n    removeTaskFromLog: taskId => dispatch(removeTask(taskId))\n  })\n)(withStyles(styles)(TasksLogs));\n","export const getRandomValue = (minVal, maxVal) => {\n  return Math.floor(minVal + Math.random() * (maxVal + 1 - minVal));\n};\n\nexport default {\n  getRandomValue\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DateTime, Interval } from 'luxon';\n\n/**\n * Components\n */\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar\n} from 'recharts';\n\n/**\n * Styles\n */\nimport { withStyles } from '@material-ui/core';\nimport styles from '../styles';\n\nimport { createTasksList, clearTasksList } from '../store/actions/task';\nimport { getRandomValue } from '../helpers';\nimport { RANDOM_TASKS } from '../helpers/constants';\n\nfunction getChartData(tasksList) {\n  const groupedTasks = [];\n\n  for (let hour = 0; hour <= 23; hour += 1) {\n    const startOfHour = DateTime.fromObject({ hour, minute: 0, second: 0 });\n    const endOfHour = DateTime.fromObject({ hour, minute: 59, second: 59 });\n    const currentHourInterval = Interval.fromDateTimes(startOfHour, endOfHour);\n\n    const foundTasks = tasksList.filter(task =>\n      currentHourInterval.intersection(\n        Interval.fromDateTimes(\n          DateTime.fromISO(task.start),\n          DateTime.fromISO(task.end)\n        )\n      )\n    );\n\n    // summary value of tasks time in minutes\n    let tasksTimeSum = 0;\n\n    if (foundTasks.length > 0) {\n      tasksTimeSum = foundTasks.reduce((sum, task) => {\n        let tasksMinutes = 60;\n        const taskStartDateTime = DateTime.fromISO(task.start);\n        const taskEndDateTime = DateTime.fromISO(task.end);\n\n        if (taskStartDateTime.hour === hour && taskEndDateTime.hour === hour) {\n          tasksMinutes = Interval.fromDateTimes(\n            taskStartDateTime,\n            taskEndDateTime\n          )\n            .toDuration('minutes')\n            .toObject().minutes;\n        } else if (taskEndDateTime.hour === hour) {\n          tasksMinutes = taskEndDateTime.minute;\n        } else if (taskStartDateTime.hour === hour) {\n          tasksMinutes = 60 - taskStartDateTime.minute;\n        }\n\n        return sum + Math.round(tasksMinutes);\n      }, tasksTimeSum);\n    }\n\n    groupedTasks.push({\n      hour,\n      tasksTime: tasksTimeSum || 0\n    });\n  }\n\n  return groupedTasks;\n}\n\nfunction TasksChart(props) {\n  const { taskList, clearTasksLog, createTasksLog, classes } = props;\n\n  function generateRandTasks() {\n    const randTasksCount = getRandomValue(\n      RANDOM_TASKS.minCount,\n      RANDOM_TASKS.maxCount\n    );\n    const generatedTasks = [];\n\n    let taskDateTime = DateTime.fromObject({ hour: RANDOM_TASKS.startHour });\n\n    for (let i = 0; i < randTasksCount; i += 1) {\n      const taskDuration = getRandomValue(\n        RANDOM_TASKS.minDuration,\n        RANDOM_TASKS.maxDuration\n      );\n      const breakDuration = getRandomValue(\n        RANDOM_TASKS.minBreakDuration,\n        RANDOM_TASKS.maxBreakDuration\n      );\n      const startTaskTime = taskDateTime.plus({ minutes: breakDuration });\n      const endTaskTime = startTaskTime.plus({ minutes: taskDuration });\n\n      taskDateTime = endTaskTime;\n\n      generatedTasks.push({\n        id: i + 1,\n        name: `New task #${i + 1}`,\n        start: startTaskTime.toISO(),\n        end: endTaskTime.toISO()\n      });\n    }\n\n    clearTasksLog();\n    createTasksLog(generatedTasks);\n  }\n\n  return (\n    <div>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={getChartData(taskList)} margin={{ top: 20 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"hour\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar\n            dataKey=\"tasksTime\"\n            name=\"Minutes in this hours\"\n            barSize={20}\n            fill=\"#3248c7\"\n          />\n        </BarChart>\n      </ResponsiveContainer>\n      <Grid container justify=\"center\">\n        <Grid item xs={12} className={classes.chartFooterContainer}>\n          <Button\n            variant=\"contained\"\n            onClick={generateRandTasks}\n            className={classes.button}\n            size=\"small\"\n          >\n            Generate\n          </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default connect(\n  ({ task }) => ({\n    taskList: task.list\n  }),\n  dispatch => ({\n    createTasksLog: list => dispatch(createTasksList(list)),\n    clearTasksLog: () => dispatch(clearTasksList())\n  })\n)(withStyles(styles)(TasksChart));\n","import React, { Component } from 'react';\nimport { Link as RouterLink, withRouter } from 'react-router-dom';\n\n/**\n * Components\n */\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport AlertDialog from '../components/AlertDialog';\nimport TimerTask from '../components/TimerTask';\nimport TasksLogs from '../components/TasksLogs';\nimport TasksChart from '../components/TasksChart';\n\n/**\n * Styles\n */\nimport styles from '../styles';\n\nimport { ROUTERS, HOMEPAGE_TABS } from '../helpers/constants';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    const { location } = props;\n    const selectedTab =\n      (location &&\n        location.pathname &&\n        location.pathname === ROUTERS.tasksChart &&\n        HOMEPAGE_TABS.chart) ||\n      HOMEPAGE_TABS.logs;\n\n    this.state = {\n      selectedTab,\n      isAlertShown: false\n    };\n\n    this.handleStateChange = this.handleStateChange.bind(this);\n    this.handleTabChange = this.handleTabChange.bind(this);\n    this.handleAlertOpen = this.handleAlertOpen.bind(this);\n    this.handleAlertClose = this.handleAlertClose.bind(this);\n  }\n\n  handleStateChange(name, value) {\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleTabChange(event, value) {\n    this.handleStateChange('selectedTab', value);\n  }\n\n  handleAlertOpen() {\n    this.handleStateChange('isAlertShown', true);\n  }\n\n  handleAlertClose() {\n    this.handleStateChange('isAlertShown', false);\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { selectedTab, isAlertShown } = this.state;\n\n    return (\n      <div className={classes.homepageContainer}>\n        <Grid container justify=\"center\">\n          <Grid item xs={12} lg={10}>\n            <TimerTask onEmptyTaskError={this.handleAlertOpen} />\n          </Grid>\n          <Grid item xs={12} lg={10}>\n            <section>\n              <AppBar position=\"relative\" className={classes.tabsWrapper}>\n                <Tabs\n                  onChange={this.handleTabChange}\n                  value={selectedTab}\n                  variant=\"fullWidth\"\n                  TabIndicatorProps={{\n                    className: classes.tabsIndicator\n                  }}\n                >\n                  <Tab\n                    label=\"Tasks logs\"\n                    value={HOMEPAGE_TABS.logs}\n                    className={classes.tab}\n                    component={RouterLink}\n                    to={ROUTERS.tasksLogs}\n                  />\n                  <Tab\n                    label=\"Tasks chart\"\n                    value={HOMEPAGE_TABS.chart}\n                    className={classes.tab}\n                    component={RouterLink}\n                    to={ROUTERS.tasksChart}\n                  />\n                </Tabs>\n              </AppBar>\n              {selectedTab === HOMEPAGE_TABS.chart ? (\n                <TasksChart />\n              ) : (\n                <TasksLogs />\n              )}\n            </section>\n          </Grid>\n        </Grid>\n\n        <AlertDialog\n          title=\"Empty task name\"\n          message=\"You are trying close your task without name, enter the title and try again!\"\n          closeButtonText=\"Close\"\n          isShown={!!isAlertShown}\n          onAlertClose={this.handleAlertClose}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(withStyles(styles)(Home));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { DateTime, Interval } from 'luxon';\nimport { Link as RouterLink, Redirect } from 'react-router-dom';\n\n/**\n * Components\n */\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n/**\n * Styles\n */\nimport { withStyles } from '@material-ui/core';\nimport styles from '../styles';\n\nimport { findTask, clearTaskDetails } from '../store/actions/task';\nimport { ROUTERS } from '../helpers/constants';\n\nclass TaskDetails extends Component {\n  componentDidMount() {\n    const { match, findTaskDetails } = this.props;\n\n    if (match.params.id) {\n      findTaskDetails(match.params.id);\n    }\n  }\n\n  componentWillUnmount() {\n    const { clearTask } = this.props;\n\n    clearTask();\n  }\n\n  render() {\n    const { task, classes } = this.props;\n\n    if (task.isFailed) {\n      return <Redirect to={ROUTERS.notFound} />;\n    }\n\n    let taskStartDateTime = DateTime.fromISO(task.startDateTime);\n    let taskEndDateTime = DateTime.fromISO(task.endDateTime);\n    const taskDuration = Interval.fromDateTimes(\n      taskStartDateTime,\n      taskEndDateTime\n    )\n      .toDuration()\n      .toFormat('hh:mm:ss');\n\n    taskStartDateTime = taskStartDateTime.toFormat('HH:mm:ss');\n    taskEndDateTime = taskEndDateTime.toFormat('HH:mm:ss');\n\n    return (\n      <Grid container justify=\"center\">\n        <Grid item xs={12} md={6}>\n          {\n            task.isLoading\n            && (\n                <Card className={classes.cardPageContainer}>\n                  <CardContent>\n                    <CircularProgress />\n                  </CardContent>\n                </Card>\n            )\n          }\n          {\n            !task.isLoading\n            && (\n                <Card className={classes.cardPageContainer}>\n                  <CardContent className={classes.textAlignLeft}>\n                    <Typography color=\"textSecondary\" variant=\"h5\" gutterBottom>\n                      {task.name}\n                    </Typography>\n                    <Typography>Time:</Typography>\n                    <Typography color=\"textSecondary\">\n                      {`${taskStartDateTime} - ${taskEndDateTime}`}\n                    </Typography>\n                    <Typography>Duration:</Typography>\n                    <Typography color=\"textSecondary\">{taskDuration}</Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button\n                        className={classes.button}\n                        size=\"small\"\n                        component={RouterLink}\n                        to={ROUTERS.tasksLogs}\n                    >\n                      Go back\n                    </Button>\n                  </CardActions>\n                </Card>\n            )\n          }\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default connect(\n  ({ task }) => ({\n    task: task.task\n  }),\n  dispatch => ({\n    findTaskDetails: taskId => dispatch(findTask(taskId)),\n    clearTask: () => dispatch(clearTaskDetails())\n  })\n)(withStyles(styles)(TaskDetails));\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n/**\n * Components\n */\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\n\n/**\n * Styles\n */\nimport { withStyles } from '@material-ui/core';\nimport styles from '../styles';\n\nimport { ROUTERS } from '../helpers/constants';\n\nfunction NotFound(props) {\n  const { classes } = props;\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item xs={12} md={6}>\n        <Card className={classes.cardPageContainer}>\n          <CardContent>\n            <Typography variant=\"h5\" gutterBottom>\n              404\n            </Typography>\n            <Typography color=\"textSecondary\">\n              Sorry, the page you are looking for could not be found.\n            </Typography>\n          </CardContent>\n          <CardActions className={classes.justifyCenter}>\n            <Button\n              className={classes.button}\n              size=\"small\"\n              component={RouterLink}\n              to={ROUTERS.tasksLogs}\n            >\n              Homepage\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default withStyles(styles)(NotFound);\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport initStore from './store';\nimport { ROUTERS } from './helpers/constants';\n\n/**\n * Components\n */\nimport Home from './pages/Home';\nimport TaskDetails from './pages/TaskDetails';\nimport NotFound from './pages/NotFound';\n\n/**\n * Styles\n */\nimport './App.css';\n\nconst store = initStore();\n\nfunction App() {\n    return (\n        <Provider store={store}>\n          <div className=\"App\">\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path={ROUTERS.tasksLogs} component={Home} />\n              <Route path={ROUTERS.tasksChart} component={Home} />\n              <Route path={`${ROUTERS.taskDetails}/:id`} component={TaskDetails} />\n              <Route component={NotFound} />\n            </Switch>\n          </Router>\n        </div>\n      </Provider>\n\n    );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport initialState, { timer, task } from './initial-state';\nimport reducers from './reducers';\nimport rootSaga from './sagas';\n\nimport BaseProxy from '../api/BaseProxy';\n\nfunction getPreloadedState() {\n  const apiProxy = new BaseProxy();\n  const cachedTimer = apiProxy.find('timer');\n  const cachedTasksLog = apiProxy.find('tasksLog');\n\n  return {\n    ...initialState,\n    timer: {\n      ...timer,\n      timer: cachedTimer || timer.timer\n    },\n    task: {\n      ...task,\n      list: cachedTasksLog || task.list\n    }\n  };\n}\n\nexport default function initStore() {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = createStore(\n    reducers,\n    getPreloadedState(),\n    composeWithDevTools(applyMiddleware(\n        sagaMiddleware,\n    ))\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}